<?php
/**
 * Created by IntelliJ IDEA.
 * User: unal
 * Date: 21.01.2016
 * Time: 11:28
 */


namespace BYRWEB\app001\card;


use BYRWEB\base\ADbObject;
use BYRWEB\base\CardSecurity;
use BYRWEB\base\Constant;
use BYRWEB\base\IDbObject;

class Card extends ADbObject implements IDbObject
{
    /**
     *
     */
    public function __construct()
    {
        $this->setRecordObject(new CardRecord());
    }

    /**
     * @param $id
     *
     * @return CardRecord
     */
    public function get($id)
    {
        /**
         * @var CardRecord
         */
        return parent::get($id);
//
    }

    /**
     * @param $data
     *
     * @return bool|CardRecord
     */
    public function add($data, $updateOnDuplicate = false)
    {

        return parent::add($data, $updateOnDuplicate);
    }

    /**
     * @param $data
     *
     * @return bool|CardRecord
     */
    public function update($data)
    {

        return parent::update($data);
    }

    /**
     * @param null  $filter
     * @param null  $keyword
     * @param null  $limit
     * @param array $order
     * @param null  $selectOnly
     *
     * @return CardRecord[]
     * @throws \BYRWEB\base\Exception
     */
    public function find($filter = null, $keyword = null, $limit = null, array $order = [], $selectOnly = null, $lookIn = null)
    {
        if (array_key_exists('card_type', $filter) && $filter['card_type'] == 'in_use') {
            $this->getRecordObject()->setSqlQueryStaticFilter('_.in_use=1');
            unset($filter['card_type']);
        }

        if (array_key_exists('card_type', $filter) && $filter['card_type'] == 'free') {
            $this->getRecordObject()->setSqlQueryStaticFilter('_.in_use IS NULL');
            unset($filter['card_type']);
        }

        return parent::find($filter, $keyword, $limit, $order, $selectOnly, $lookIn); // TODO: Change the autogenerated stub
    }

    public function import($data)
    {

        $hash = CardSecurity::getHash($data->import_data);
        if ($hash !== $data->license_key) {
            return false;
        }

        $cardNumbers = explode(PHP_EOL, $data->import_data);


        foreach ($cardNumbers as $cardNumber) {

            $securityCode = md5(Constant::LICENSE_SALT + $cardNumber);

            $post = [
                'branch_id'     => $data->branch_id,
                'security_code' => $securityCode,
                'card_no'       => $cardNumber,
                'type_id'       => $data->type_id,
            ];

            $cr = new CardRecord();
            $cr->setDb($this->db);
            $cr->loadFrom($post);
            $result = $cr->add();

            if (!$result) {
                return false;
            }
        }

        return true;
    }


}