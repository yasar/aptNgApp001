<?php
/**
 * Created by IntelliJ IDEA.
 * User: unal
 * Date: 18.11.2015
 * Time: 11:57
 */

namespace BYRWEB\app001\stock;


use BYRWEB\app001\saleitem\SaleitemRecord;
use BYRWEB\base\ADbObject;
use BYRWEB\base\Exception;
use BYRWEB\base\SecurityUtils;
use BYRWEB\base\WTDbUtils;
use BYRWEB\common\Session;

class Stock extends ADbObject
{
//    public $qty;
//    public $saleitem_id;
//    public $enterprise_id;
    private $branch_id;
    private $enterprise_id;


    public function __construct()
    {
        $this->setRecordObject(new StockRecord());
        $this->enterprise_id = Session::user()->enterprise_id;
        $this->branch_id     = Session::user()->branch_id;
    }

//    /**
//     * @param $saleitem_id
//     * @return StockRecord
//     */
//    public function getStock($saleitem_id)
////    public function getSaleitemStock()
//    {
//        $rows = parent::find([
//            'enterprise_id' => Session::user()->enterprise_id,
//            'branch_id' => $this->branch_id,
//            'saleitem_id' => $saleitem_id
//        ]);
//
//        if (!$rows) {
//            return false;
//        }
//
//        return $rows[0];
//
////        $sql = "select * from stock as s where
////          s.enterprise_id={$this->enterprise_id} and
////          s.branch_id={$this->branch_id} AND
////          s.saleitem_id={$this->saleitem_id} ";
////        $sth = $this->db->query($sql);
////        $row = $sth->fetch(\PDO::FETCH_ASSOC);
////
////        return $row;
//    }

    public function decrease($saleitem_id, $qty)
    {
        $this->increment($saleitem_id, $qty * (-1));
    }

    public function increase($saleitem_id, $qty)
    {
        $this->increment($saleitem_id, $qty);
    }

    private function increment($saleitem_id, $qty)
    {
        if (!$this->branch_id) {
            $this->branch_id = Session::user()->branch_id;
        }
        $filterData = [
            'enterprise_id' => $this->enterprise_id,
            'branch_id'     => $this->branch_id,
            'saleitem_id'   => $saleitem_id,
        ];

        $rows = $this->find($filterData);

        if (!$rows) {
//            throw new Exception('Stock item not found');
            $stockRecord = new StockRecord();
            $stockRecord->setDb($this->db);
            $stockData = array_merge($filterData, ['qty' => 0]);
            $stockRecord->loadFrom($stockData);
            $stockRecord->add();
        } else {
            $stockRecord = $rows[0];
        }
        $stockRecord->qty += $qty;
        $stockRecord->setDb($this->db);
        $stockRecord->update();

        $saleitemRecord = new SaleitemRecord();
        $saleitemRecord->setDb($this->db);
        $saleitemRecord->setPrimaryValue($saleitem_id);
        $saleitemRecord->load();
        $saleitemRecord->stock += $qty;
        $saleitemRecord->update();

    }

//    public function updateSaleitemStock($stock_id){
//        $sql = "update stock as s  set  s.qty={$qty}
//        where s.stock_id=$stock_id";
//        $this->db->exec($sql);
//      }

//    private function updateStock($stock_id, $qty)
//    {
//        $tableName = $this->getRecordObject()->getTableName();
//        list($fields, $values) = WTDbUtils::getFieldsValues($tableName, null, true,
//            ['stock_id' => $stock_id, 'qty' => $qty]);
//        $sql = WTDbUtils::getUpdateQuery($tableName, $fields, $values, SecurityUtils::getEnterpriseSecurityForQuery(false));
//        $result = $this->db->exec($sql);
//
//        if($result){
//
//        }
//    }

//    public function updateSaleitemTotalStock($qty)
//    {
//        $sql = "update saleitem as s set s.qty={$qty}
//        WHERE s.saleitem_id={$this->saleitem_id} AND
//         s.enterprise_id={$this->enterprise_id}";
//        $this->db->exec($sql);
//    }

    /**
     * @param null       $filter
     * @param null       $keyword
     * @param null       $limit
     * @param array|null $order
     * @param null       $selectOnly
     *
     * @return StockRecord[]
     */
    public function find($filter = null, $keyword = null, $limit = null, array $order = [], $selectOnly = null, $lookIn = null)
    {
        return parent::find($filter, $keyword, $limit, $order, $selectOnly, $lookIn); // TODO: Change the autogenerated stub
    }

    public function hasItem()
    {
        $sql = 'SELECT
                  COUNT(*) AS total
                FROM stock
                WHERE
                saleitem_id = :saleitem_id
                AND
                enterprise_id = :enterprise_id
                AND
                branch_id = :branch_id';
        $sth = $this->db->prepare($sql);
        $sth->execute([
            'saleitem_id'   => $this->saleitem_id,
            'enterprise_id' => $this->enterprise_id,
            'branch_id'     => $this->branch_id,
        ]);
        $row = $sth->fetch(\PDO::FETCH_ASSOC);
        if ($row['total'] == 0) {
            return false;
        }

        return true;
    }

    public function updateQtyForPurchase()
    {
        $sql = 'UPDATE
                  stock
                SET
                  `qty` = qty + :qty
                WHERE
                saleitem_id = :saleitem_id
                AND
                enterprise_id = :enterprise_id
                AND
                branch_id = :branch_id';
        $sth = $this->db->prepare($sql);
        $sth->execute([
            'qty'           => $this->qty,
            'saleitem_id'   => $this->saleitem_id,
            'enterprise_id' => $this->enterprise_id,
            'branch_id'     => $this->branch_id,
        ]);

        if ('00000' != $sth->errorCode()) {
            return false;
        }

        return true;
    }

    /**
     * @param mixed $branch_id
     */
    public function setBranchId($branch_id)
    {
        $this->branch_id = $branch_id;
    }


}