<?php
/**
 * Created by IntelliJ IDEA.
 * User: unal
 * Date: 21.01.2016
 * Time: 11:28
 */


namespace BYRWEB\app001\seller;


use BYRWEB\app999\address\Address;
use BYRWEB\app999\entity\Entity;
use BYRWEB\app999\entity\EntityAddressRecord;
use BYRWEB\app999\person\Person;
use BYRWEB\app999\person\PersonAddressRecord;
use BYRWEB\base\ADbObject;
use BYRWEB\base\IDbObject;
use BYRWEB\contact\Contact;
use BYRWEB\lup\type\Type;

class Seller extends ADbObject implements IDbObject
{
    /**
     *
     */
    public function __construct()
    {
        $this->setRecordObject(new SellerRecord());
    }

    /**
     * @param $id
     *
     * @return SellerRecord
     */
    public function get($id)
    {
        /**
         * @var SellerRecord
         */
        return parent::get($id);
//
    }

    /**
     * @param $data
     *
     * @return bool|SellerRecord
     */
    public function add($data, $updateOnDuplicate = false)
    {
//        return;

        $this->db->beginTransaction();

        if (array_key_exists('quickEntityData', $data)) {
            $entityRecord    = $this->addQuickEntityBeforeSeller($data);
            $data->entity_id = $entityRecord->entity_id;
        }

        if (array_key_exists('quickPersonData', $data)) {
            $personRecord    = $this->addQuickPersonBeforeSeller($data);
            $data->person_id = $personRecord->person_id;

        }
        $seller = parent::add($data, $updateOnDuplicate);

        if (!$seller) {
            return false;
        }

        $this->db->commit();

        return $seller;
    }

    /**
     * @param $data
     *
     * @return bool|SellerRecord
     */
    public function update($data)
    {

        return parent::update($data);
    }

    /**
     * @param null  $filter
     * @param null  $keyword
     * @param null  $limit
     * @param array $order
     *
     * @return array
     */
    public function find($filter = null, $keyword = null, $limit = null, array $order = [], $selectOnly = null, $lookIn = null)
    {
        if (array_key_exists('seller_type', $filter) && $filter['seller_type'] == 'person') {
            $this->getRecordObject()->setSqlQueryStaticFilter('_.person_id is not null and _.entity_id is null');
            unset($filter['seller_type']);
        }

        if (array_key_exists('seller_type', $filter) && $filter['seller_type'] == 'entity') {
            $this->getRecordObject()->setSqlQueryStaticFilter('_.person_id is null and _.entity_id is not null ');
            unset($filter['seller_type']);
        }

        return parent::find($filter, $keyword, $limit, $order, $selectOnly, $lookIn); // TODO: Change the autogenerated stub
    }

    public function addQuickPersonBeforeSeller($data)
    {
        $person = new Person();
        $person->setDb($this->db);
        $person->getRecordObject()->loadFrom($data->quickPersonData);
        $person->getRecordObject()->add();
        $personRecord = $person->get($this->db->lastInsertId());


        if (array_key_exists('quickAddressData', $data)) {

            $addressRecord = self::addQuickAddress($data->quickAddressData);

            $personAddress = new PersonAddressRecord();
            $personAddress->setDb($this->db);
            $personAddress->person_id  = $personRecord->person_id;
            $personAddress->address_id = $addressRecord->address_id;
            $personAddress->title      = 'Hızlı Satıcı Kaydı';
            $personAddress->add();
        }

        if (array_key_exists('quickContactData', $data)) {
            $data->quickContactData->person_id = $personRecord->person_id;
            self::addQuickContact($data->quickContactData);
        }

        return $personRecord;
    }


    public function addQuickEntityBeforeSeller($data)
    {
        $entity = new Entity();
        $entity->setDb($this->db);
        $entity->getRecordObject()->loadFrom($data->quickEntityData);
        $entity->getRecordObject()->add();
        $entityRecord = $entity->get($this->db->lastInsertId());


        if (array_key_exists('quickAddressData', $data)) {


            $addressRecord = self::addQuickAddress($data->quickAddressData);

            $entityAddress = new EntityAddressRecord();
            $entityAddress->setDb($this->db);
            $entityAddress->entity_id  = $entityRecord->entity_id;
            $entityAddress->address_id = $addressRecord->address_id;
            $entityAddress->title      = 'Hızlı Satıcı Kaydı';
            $entityAddress->add();
        }

        if (array_key_exists('quickContactData', $data)) {

            $data->quickContactData->entity_id = $entityRecord->entity_id;
            self::addQuickContact($data->quickContactData);
        }

        return $entityRecord;

    }


    private function addQuickAddress($data)
    {
        $address = new Address();
        $address->setDb($this->db);
        $address->getRecordObject()->loadFrom($data);
        $address->getRecordObject()->add();
        $addressRecord = $address->get($this->db->lastInsertId());

        return $addressRecord;
    }

    private function addQuickContact($data)
    {

        $data = (array)$data;

        foreach ($data as $key => $value) {
            if ($key !== 'phone' && $key !== 'email') {
                continue;
            }

            if ($key == 'phone') {
                $type          = Type::getBy(['class' => 'Phone', 'name' => 'Mobile']);
                $data['value'] = $value;
            }
            if ($key == 'email') {
                $type          = Type::getBy(['class' => 'Email']);
                $data['value'] = $value;
            }

            $data['type_id'] = $type->type_id;

            $contact = new Contact();
            $contact->setDb($this->db);
            $contact->getRecordObject()->loadFrom($data);
            $contact->getRecordObject()->add();
        }


    }

    public function getProfile($seller_id, $profile_type)
    {
        $sellerProfile = function ($seller_id) {

            $sql = "SELECT
	s.seller_id,
	(
		CASE
		WHEN s.person_id IS NOT NULL THEN
			concat(
				p.first_name,
				' ',
				p.last_name
			)
		WHEN s.entity_id IS NOT NULL THEN
			e.title
		END
	) AS `name`,
	e.tax_nr,
	e.tax_office,
	p.tckn AS tck_no,
	con_phone.`value` AS phone,
	con_email.`value` AS email
FROM
	seller AS s
LEFT JOIN entity AS e ON e.entity_id = s.entity_id
LEFT JOIN person AS p ON p.person_id = s.person_id
LEFT JOIN (
	SELECT
		*
	FROM
		contact
	WHERE
		type_id IN (
			SELECT
				type_id
			FROM
				`type`
			WHERE
				`name` = 'mobile'
		)
) AS con_phone ON con_phone.person_id = p.person_id
OR con_phone.entity_id = e.entity_id
LEFT JOIN (
	SELECT
		*
	FROM
		contact
	WHERE
		type_id IN (
			SELECT
				type_id
			FROM
				`type`
			WHERE
				`name` = 'email'
		)
) AS con_email ON con_email.person_id = p.person_id
OR con_email.entity_id = e.entity_id
WHERE
	s.seller_id = $seller_id";

            $sth = $this->db->query($sql);
            $row = $sth->fetch(\PDO::FETCH_ASSOC);

            return $row;

        };

        switch ($profile_type) {
            case 'overview':
                return $sellerProfile($seller_id);
                break;
        }
    }



}