<?php
/**
 * Created by IntelliJ IDEA.
 * User: unal
 * Date: 21.01.2016
 * Time: 11:28
 */


namespace BYRWEB\app001\saleitemPrice;


use BYRWEB\app001\price\PriceRecord;
use BYRWEB\app998\tax\TaxUtils;
use BYRWEB\app999\type\Type;
use BYRWEB\app999\type\TypeRecord;
use BYRWEB\base\ADbObject;
use BYRWEB\base\IDbObject;


class SaleitemPrice extends ADbObject implements IDbObject
{
    public function __construct()
    {
    	parent::__construct();
        $this->setRecordObject(new SaleitemPriceRecord());
    }

    public function setPrimary($saleitemPriceId)
    {
        /**
         * first find the type of the price
         * if `sale` then reset all other sale prices' is_primary flag,
         * then we will set the primary flag for requested saleitemPrice.
         *
         * or if `purchase` then do nothing.
         * only sale prices will have is_primary set for one.
         */

        $saleitemPrice = $this->get($saleitemPriceId);
        $priceType = new TypeRecord();
        $priceType->setDb($this->db);
        $priceType->setPrimaryValue($saleitemPrice->price_type_id);
        $priceType->load();

        if ($priceType->name == 'sale') {
            $sql = "update " . $this->getRecordObject()->getTableName() . " 
                    set 
                        is_primary = if(saleitem_price_id={$saleitemPrice->saleitem_price_id}, 1, NULL) 
                    where saleitem_id={$saleitemPrice->saleitem_id} and price_type_id={$priceType->type_id};";

            $this->getDb()->execUpdate($sql);


            /**
             * now reload the price from database with fresh data.
             */
            $saleitemPrice->load();
        }

        return $saleitemPrice;
    }
	
	
	
	/**
	 * @param $id
	 *
	 * @return SaleitemPriceRecord
	 * @throws \BYRWEB\base\exceptions\Exception
	 */
    public function get($id)
    {
        /**
         * @var $record SaleitemPriceRecord
         */
        $record = parent::get($id);
        $record->loadPrice();

        return $record;
//
    }

    /**
     * @return SaleitemPriceRecord
     */
    public function getRecordObject()
    {
        return parent::getRecordObject(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $data
     *
     * @return bool|SaleitemPriceRecord
     */
    public function add($data, $updateOnDuplicate = false)
    {

        $priceRecord = new PriceRecord();
        $priceRecord->setDb($this->db);
        if (property_exists($data, 'price')
            && (is_array($data->price) || is_object($data->price))
        ) {
            $priceRecord->loadFrom($data->price);
        } else {
            $priceRecord->loadFrom($data);
        }

        TaxUtils::updatePrice($priceRecord);

        $priceRecord->add();
        $data->price_id = $priceRecord->price_id;

        if (!property_exists($data, 'price_type_id')) {
            $priceType = Type::getBy(['name' => 'sale', 'groupname' => 'Price']);
            $data->price_type_id = $priceType->type_id;
        }

        return parent::add($data, $updateOnDuplicate);
    }

    /**
     * @param $data
     *
     * @return bool|SaleitemPriceRecord
     */
    public function update($data)
    {
//    	var_dump($data);exit;
        $priceRecord = new PriceRecord();
        $priceRecord->setDb($this->db);
        $priceRecord->loadFrom($data['price']);
        $priceRecord->analyseTax();

//        TaxUtils::updatePrice($priceRecord);

        $priceRecord->update();

        return parent::update($data);
    }

    /**
     * @param null $filter
     * @param null $keyword
     * @param null $limit
     * @param array $order
     *
     * @return array SaleitemPriceRecord
     */
    public function find($filter = null, $keyword = null, $limit = null, array $order = [], $selectOnly = null, $lookIn = null)
    {

        $rows = parent::find($filter, $keyword, $limit, $order, $selectOnly, $lookIn);

        /**
         * @var $rows SaleitemPriceRecord[]
         */
        foreach ($rows as &$row) {
            $row->setDb($this->db);
            $row->loadPrice();
        }

        return $rows;
    }
}